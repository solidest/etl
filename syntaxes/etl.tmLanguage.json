{
    "name": "ETL",
    "scopeName": "source.etl",
    "fileTypes": [
        "etl"
    ],
    "uuid": "a5720f64-ac4a-40f9-baf9-8b4c39b25d81",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#top-declaration"
        }
    ],
    "repository": {
        "top-declaration": {
            "patterns": [
                {
                    "include": "#protocol-declaration"
                },
                {
                    "include": "#device-declaration"
                },
                {
                    "include": "#topology-declaration"
                }
            ]
        },
        "topology-declaration": {
            "name": "meta.module.etl",
            "begin": "\\b(topology)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.module.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.module.etl"
                        }
                    }
                },
                {
                    "include": "#object-literal"
                }
            ]
        },
        "device-declaration": {
            "name": "meta.module.etl",
            "begin": "\\b(device)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.module.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#device-declaration-patterns"
                }
            ]
        },
        "device-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.module.etl"
                        }
                    }
                },
                {
                    "include": "#device-body"
                }
            ]
        },
        "device-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#element-declaration-patterns"
                }
            ]
        },
        "protocol-declaration": {
            "name": "meta.module.etl",
            "begin": "\\b(protocol)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.module.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#protocol-declaration-patterns"
                }
            ]
        },
        "protocol-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.module.etl"
                        }
                    }
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "protocol-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#protocol-segment-declaration"
                },
                {
                    "include": "#protocol-segments-declaration"
                },
                {
                    "include": "#protocol-oneof-declaration"
                }
            ]
        },
        "protocol-segment-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(segment)\\b(?=\\s+|/[/*])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-segment-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-segment-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#element-arraylen"
                },
                {
                    "include": "#object-literal"
                }
            ]
        },
        "protocol-segments-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(segments)\\b(?=\\s+|/[/*])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-segments-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-segments-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#element-arraylen"
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "protocol-oneof-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(oneof)\\b(?=\\s+|\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.conditional.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-oneof-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-oneof-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "element-arraylen": {
            "name": "meta.arraylen.etl",
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "element-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "\\b(udp_server|udp_client|tcp_server|tcp_client|di|do|ad|da|serial_ttl|serial_232|serial_485|serial_422|serial_usb|can)\\b(?=\\s+|/[/*])",
                    "captures": {
                        "0": {
                            "name": "storage.type.class.etl"
                        }
                    }
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#object-literal"
                }
            ]
        },
        "object-literal": {
            "name": "meta.objectliteral.etl",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#object-member"
                }
            ]
        },
        "object-member": {
            "patterns": [
                {
                    "match": "((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)((\\.)([_$[:alpha:]][_$[:alnum:]]*))*\\s*:)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "name": "punctuation.accessor.optional.etl",
                                    "match": "\\."
                                },
                                {
                                    "name": "storage.type.class.etl",
                                    "match": "\\b(linking|mapping|binding|uut|etest)\\b"
                                },
                                {
                                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                                },
                                {
                                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                                    "match": ":"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "meta.object.member.etl",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#expressionWithoutIdentifiers"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#expressionPunctuations"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "include": "#object-identifiers"
                },
                {
                    "match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "entity.name.function.etl"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.constant.property.etl"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.property.etl"
                        }
                    }
                },
                {
                    "name": "variable.other.constant.etl",
                    "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
                },
                {
                    "name": "variable.other.readwrite.etl",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "object-identifiers": {
            "patterns": [
                {
                    "name": "support.class.etl",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))"
                },
                {
                    "match": "(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.constant.object.property.etl"
                        },
                        "4": {
                            "name": "variable.other.object.property.etl"
                        }
                    }
                },
                {
                    "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.object.etl"
                        },
                        "2": {
                            "name": "variable.other.object.etl"
                        }
                    }
                }
            ]
        },
        "expressionWithoutIdentifiers": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#object-literal"
                },
                {
                    "include": "#expression-operators"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                }
            ]
        },
        "expressionPunctuations": {
            "patterns": [
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-accessor"
                }
            ]
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.etl",
            "match": ","
        },
        "punctuation-accessor": {
            "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.etl"
                },
                "2": {
                    "name": "punctuation.accessor.optional.etl"
                }
            }
        },
        "literal": {
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#null-literal"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "include": "#this-literal"
                }
            ]
        },
        "support-objects": {
            "patterns": [
                {
                    "name": "support.function.etl",
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(bytesize|checkcode|beginof|endof)(?=\\s*\\()"
                }
            ]
        },
        "expression-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.compound.etl",
                    "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
                },
                {
                    "name": "keyword.operator.assignment.compound.bitwise.etl",
                    "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
                },
                {
                    "name": "keyword.operator.bitwise.shift.etl",
                    "match": "<<|>>>|>>"
                },
                {
                    "name": "keyword.operator.comparison.etl",
                    "match": "===|!==|==|!="
                },
                {
                    "name": "keyword.operator.relational.etl",
                    "match": "<=|>=|<>|<|>"
                },
                {
                    "match": "(\\!)\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.logical.etl"
                        },
                        "2": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    }
                },
                {
                    "name": "keyword.operator.logical.etl",
                    "match": "\\#|\\!|&&|\\|\\||\\?\\?"
                },
                {
                    "name": "keyword.operator.bitwise.etl",
                    "match": "\\&|~|\\^|\\|"
                },
                {
                    "name": "keyword.operator.assignment.etl",
                    "match": "\\="
                },
                {
                    "name": "keyword.operator.decrement.etl",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.etl",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.arithmetic.etl",
                    "match": "%|\\*|/|-|\\+"
                },
                {
                    "begin": "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(/)(?![/*]))",
                    "end": "(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "match": "(?<=[_$[:alnum:])\\]])\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    }
                }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.etl"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.etl"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "function-call": {
            "begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
            "end": "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
            "patterns": [
                {
                    "name": "meta.function-call.etl",
                    "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
                    "end": "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
                    "patterns": [
                        {
                            "include": "#support-function-call-identifiers"
                        },
                        {
                            "name": "entity.name.function.etl",
                            "match": "(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                },
                {
                    "include": "#comment"
                },
                {
                    "name": "meta.function-call.etl punctuation.accessor.optional.etl",
                    "match": "\\?\\."
                },
                {
                    "name": "meta.function-call.etl keyword.operator.definiteassignment.etl",
                    "match": "\\!"
                },
                {
                    "include": "#paren-expression"
                }
            ]
        },
        "support-function-call-identifiers": {
            "patterns": [
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                },
                {
                    "include": "#object-identifiers"
                },
                {
                    "include": "#punctuation-accessor"
                },
                {
                    "name": "keyword.operator.expression.import.etl",
                    "match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))"
                }
            ]
        },
        "array-literal": {
            "name": "meta.array.literal.etl",
            "begin": "\\s*(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "meta.brace.square.etl"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.square.etl"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.etl",
                    "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "name": "constant.numeric.binary.etl",
                    "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "name": "constant.numeric.octal.etl",
                    "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.etl"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "2": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "4": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "6": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "7": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "8": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "9": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "10": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "11": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "12": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "13": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "14": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "constant.language.boolean.false.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                }
            ]
        },
        "null-literal": {
            "name": "constant.language.null.etl",
            "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        "this-literal": {
            "name": "variable.language.this.etl",
            "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)"
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.etl",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.etl"
                        },
                        "2": {
                            "name": "comment.line.double-slash.etl"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "(?=$)",
                    "contentName": "comment.line.double-slash.etl"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "include": "#qstring-double"
                },
                {
                    "include": "#qstring-single"
                },
                {
                    "include": "#qstring-hex"
                }
            ]
        },
        "qstring-double": {
            "name": "string.quoted.double.etl",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\")|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "qstring-single": {
            "name": "string.quoted.single.etl",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\\')|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "qstring-hex": {
            "name": "string.quoted.hex.etl",
            "begin": "%",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.tbegin.etl"
                }
            },
            "end": "%",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.tend.etl"
                }
            },
            "patterns": [
                {
                    "name": "constant.numeric.hex.etl",
                    "match": "[0-9A-Fa-f\\t\\s]*"
                }
            ]
        },
        "string-character-escape": {
            "name": "constant.character.escape.etl",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        }
    }
}