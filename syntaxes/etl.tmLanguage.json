{
    "name": "ETL",
    "scopeName": "source.etl",
    "fileTypes": [
        "etl"
    ],
    "uuid": "a5720f64-ac4a-40f9-baf9-8b4c39b25d81",
    "patterns": [
        {
            "include": "#statements"
        }
    ],
    "repository": {
        "statements": {
            "patterns": [
                {
                    "include": "#top-declaration"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "top-declaration": {
            "patterns": [
                {
                    "include": "#protocol-declaration"
                }
            ]
        },
        "protocol-declaration": {
            "name": "meta.module.etl",
            "begin": "\\b(protocol)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.module.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#protocol-declaration-patterns"
                }
            ]
        },
        "protocol-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.module.etl"
                        }
                    }
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "protocol-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#protocol-element2-declaration"
                }
            ]
        },
        "protocol-element2-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(segment)\\b(?=\\s+|/[/*])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-element2-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-element2-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#protocol-element2-body"
                }
            ]
        },
        "protocol-element2-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#element2-property-setting"
                }
            ]
        },
        "element2-property-setting": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#object-literal-method-declaration"
                },
                {
                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                    "begin": "(?=\\[)",
                    "end": "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#array-literal"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                    "begin": "(?=[\\'\\\"\\`])",
                    "end": "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as)\\s+))))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                    "begin": "(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)))",
                    "end": "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as\\s+))",
                    "patterns": [
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#numeric-literal"
                        }
                    ]
                },
                {
                    "name": "meta.method.declaration.etl",
                    "begin": "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
                    "end": "(?=\\}|;|,)|(?<=\\})",
                    "patterns": [
                        {
                            "include": "#function-body"
                        }
                    ]
                },
                {
                    "name": "meta.object.member.etl",
                    "match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
                    "captures": {
                        "0": {
                            "name": "meta.object-literal.key.etl"
                        },
                        "1": {
                            "name": "constant.numeric.decimal.etl"
                        }
                    }
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.etl",
                    "begin": "/\\*\\*(?!/)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#docblock"
                        }
                    ]
                },
                {
                    "name": "comment.block.etl",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.etl"
                        },
                        "2": {
                            "name": "comment.line.double-slash.etl"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "(?=$)",
                    "contentName": "comment.line.double-slash.etl"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "include": "#qstring-single"
                },
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-double": {
            "name": "string.quoted.double.etl",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\")|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "qstring-single": {
            "name": "string.quoted.single.etl",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\\')|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-character-escape": {
            "name": "constant.character.escape.etl",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },
        "docblock": {
            "patterns": [
                {
                    "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "constant.language.access-type.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        },
                        "4": {
                            "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                        },
                        "5": {
                            "name": "constant.other.email.link.underline.jsdoc"
                        },
                        "6": {
                            "name": "punctuation.definition.bracket.angle.end.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        },
                        "4": {
                            "name": "keyword.operator.control.jsdoc"
                        },
                        "5": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "name": "meta.example.jsdoc",
                    "begin": "((@)example)\\s+",
                    "end": "(?=@|\\*/)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "^\\s\\*\\s+"
                        },
                        {
                            "contentName": "constant.other.description.jsdoc",
                            "begin": "\\G(<)caption(>)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.jsdoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.jsdoc"
                                }
                            },
                            "end": "(</)caption(>)|(?=\\*/)",
                            "endCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.jsdoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.jsdoc"
                                }
                            }
                        },
                        {
                            "match": "[^\\s@*](?:[^*]|\\*[^/])*",
                            "captures": {
                                "0": {
                                    "name": "source.embedded.etl"
                                }
                            }
                        }
                    ]
                },
                {
                    "match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "constant.language.symbol-type.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.link.underline.jsdoc"
                        },
                        "4": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "begin": "((@)typedef)\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "entity.name.type.instance.jsdoc",
                            "match": "(?:[^@\\s*/]|\\*[^/])+"
                        }
                    ]
                },
                {
                    "begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "variable.other.jsdoc",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        },
                        {
                            "name": "variable.other.jsdoc",
                            "match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.jsdoc"
                                },
                                "3": {
                                    "name": "source.embedded.etl"
                                },
                                "4": {
                                    "name": "punctuation.definition.optional-value.end.bracket.square.jsdoc"
                                },
                                "5": {
                                    "name": "invalid.illegal.syntax.jsdoc"
                                }
                            }
                        }
                    ]
                },
                {
                    "begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        }
                    ]
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "contentName": "variable.other.jsdoc",
                    "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        },
                        "4": {
                            "name": "punctuation.definition.string.begin.jsdoc"
                        }
                    },
                    "end": "(\\3)|(?=$|\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "variable.other.jsdoc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.jsdoc"
                        }
                    }
                },
                {
                    "match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "name": "storage.type.class.jsdoc",
                    "match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    }
                },
                {
                    "include": "#inline-tags"
                },
                {
                    "match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    }
                }
            ]
        }
    }
}