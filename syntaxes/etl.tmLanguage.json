{
    "name": "ETL",
    "scopeName": "source.etl",
    "fileTypes": [
        "etl"
    ],
    "uuid": "a5720f64-ac4a-40f9-baf9-8b4c39b25d81",
    "patterns": [
        {
            "include": "#statements"
        }
    ],
    "repository": {
        "script-block": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#var-declaration"
                }
            ]
        },
        "var-declaration": {
            "name": "meta.var.etl",
            "begin": "\\b(let)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.etl"
                },
                "2": {
                    "name": "variable.define.etl"
                },
                "3": {
                    "name": "keyword.operator.assignment.etl"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.statement.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "include": "#object-literal"
                }
            ]
        },
        "statements": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#using-file"
                },
                {
                    "include": "#top-declaration"
                }
            ]
        },
        "using-file": {
            "name": "meta.import.etl",
            "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\s+)?\\b(using)(?:\\s+)",
            "beginCaptures": {
                "2": {
                    "name": "keyword.control.using.etl"
                }
            },
            "end": "\\s+(as)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
            "endCaptures": {
                "1": {
                    "name": "keyword.control.as.etl"
                },
                "2": {
                    "name": "entity.name.type.package.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "top-declaration": {
            "patterns": [
                {
                    "include": "#protocol-declaration"
                }
            ]
        },
        "protocol-declaration": {
            "name": "meta.module.etl",
            "begin": "\\b(protocol)\\b(?=\\s+|/[/*])",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.module.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#protocol-declaration-patterns"
                }
            ]
        },
        "protocol-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.module.etl"
                        }
                    }
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "protocol-body": {
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#protocol-segment-declaration"
                },
                {
                    "include": "#protocol-segments-declaration"
                },
                {
                    "include": "#protocol-case-declaration"
                }
            ]
        },
        "protocol-segment-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(segment)\\b(?=\\s+|/[/*])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-segment-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-segment-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#object-literal"
                }
            ]
        },
        "protocol-segments-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b(segments)\\b(?=\\s+|/[/*])",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-segments-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-segments-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "match": "[_$[:alpha:]][_$[:alnum:]]*",
                    "captures": {
                        "0": {
                            "name": "entity.name.type.class.etl"
                        }
                    }
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "protocol-case-declaration": {
            "patterns": [
                {
                    "name": "meta.segment.declaration.etl",
                    "begin": "\\b((oneof)|(when))\\b(?=\\s+|\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.conditional.etl"
                        }
                    },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "include": "#protocol-case-declaration-patterns"
                        }
                    ]
                }
            ]
        },
        "protocol-case-declaration-patterns": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#protocol-body"
                }
            ]
        },
        "object-literal": {
            "name": "meta.objectliteral.etl",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.etl"
                }
            },
            "patterns": [
                {
                    "include": "#object-member"
                }
            ]
        },
        "object-member": {
            "patterns": [
                {
                    "name": "meta.object.member.etl meta.object-literal.key.etl",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*(.[_$[:alpha:]][_$[:alnum:]]*)*[\\s]*:)"
                },
                {
                    "name": "meta.object.member.etl",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#expressionWithoutIdentifiers"
                },
                {
                    "include": "#identifiers"
                },
                {
                    "include": "#expressionPunctuations"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "include": "#object-identifiers"
                },
                {
                    "match": "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "entity.name.function.etl"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.constant.property.etl"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.property.etl"
                        }
                    }
                },
                {
                    "name": "variable.other.constant.etl",
                    "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
                },
                {
                    "name": "variable.other.readwrite.etl",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "object-identifiers": {
            "patterns": [
                {
                    "name": "support.class.etl",
                    "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))"
                },
                {
                    "match": "(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "variable.other.constant.object.property.etl"
                        },
                        "4": {
                            "name": "variable.other.object.property.etl"
                        }
                    }
                },
                {
                    "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.object.etl"
                        },
                        "2": {
                            "name": "variable.other.object.etl"
                        }
                    }
                }
            ]
        },
        "expressionWithoutIdentifiers": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#function-expression"
                },
                {
                    "include": "#object-literal"
                },
                {
                    "include": "#expression-operators"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                }
            ]
        },
        "function-expression": {
            "name": "meta.function.expression.etl",
            "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(function\\b)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.etl"
                }
            },
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#function-body"
                }
            ]
        },
        "function-body": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#function-parameters"
                },
                {
                    "include": "#script-block"
                }
            ]
        },
        "function-parameters": {
            "name": "meta.parameters.etl",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.etl"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.etl"
                }
            },
            "patterns": [
                {
                    "include": "#function-parameters-body"
                }
            ]
        },
        "function-parameters-body": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#parameter-name"
                },
                {
                    "include": "#variable-initializer"
                },
                {
                    "name": "punctuation.separator.parameter.etl",
                    "match": ","
                }
            ]
        },
        "parameter-name": {
            "patterns": [
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|protected|private|readonly)\\s+(?=(public|protected|private|readonly)\\s+)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.etl"
                        }
                    }
                },
                {
                    "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<[^<>]+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.etl"
                        },
                        "2": {
                            "name": "keyword.operator.rest.etl"
                        },
                        "3": {
                            "name": "entity.name.function.etl variable.language.this.etl"
                        },
                        "4": {
                            "name": "entity.name.function.etl"
                        },
                        "5": {
                            "name": "keyword.operator.optional.etl"
                        }
                    }
                },
                {
                    "match": "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.etl"
                        },
                        "2": {
                            "name": "keyword.operator.rest.etl"
                        },
                        "3": {
                            "name": "variable.parameter.etl variable.language.this.etl"
                        },
                        "4": {
                            "name": "variable.parameter.etl"
                        },
                        "5": {
                            "name": "keyword.operator.optional.etl"
                        }
                    }
                }
            ]
        },
        "variable-initializer": {
            "patterns": [
                {
                    "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.etl"
                        }
                    },
                    "end": "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "begin": "(?<!=|!)(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.etl"
                        }
                    },
                    "end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                }
            ]
        },
        "expressionPunctuations": {
            "patterns": [
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#punctuation-accessor"
                }
            ]
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.etl",
            "match": ","
        },
        "punctuation-semicolon": {
            "name": "punctuation.terminator.statement.etl",
            "match": ";"
        },
        "punctuation-accessor": {
            "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.etl"
                },
                "2": {
                    "name": "punctuation.accessor.optional.etl"
                }
            }
        },
        "literal": {
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#null-literal"
                },
                {
                    "include": "#array-literal"
                },
                {
                    "include": "#this-literal"
                }
            ]
        },
        "support-objects": {
            "patterns": [
                {
                    "name": "variable.language.arguments.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)"
                },
                {
                    "name": "support.class.builtin.etl",
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array\n  |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
                },
                {
                    "name": "support.class.error.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
                },
                {
                    "name": "support.class.promise.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)"
                },
                {
                    "name": "support.function.etl",
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
                },
                {
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.math.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.function.math.etl"
                        },
                        "5": {
                            "name": "support.constant.property.math.etl"
                        }
                    }
                },
                {
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(console)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.class.console.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.function.console.etl"
                        }
                    }
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(JSON)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(parse|stringify))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.json.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.function.json.etl"
                        }
                    }
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.import.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.variable.property.importmeta.etl"
                        }
                    }
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.new.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.variable.property.target.etl"
                        }
                    }
                },
                {
                    "match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())\n  |\n  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "support.variable.property.etl"
                        },
                        "4": {
                            "name": "support.constant.etl"
                        }
                    }
                },
                {
                    "match": "(?x) (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.)) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.variable.dom.etl"
                        },
                        "2": {
                            "name": "support.class.dom.etl"
                        }
                    }
                },
                {
                    "match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\()",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "support.constant.dom.etl"
                        },
                        "4": {
                            "name": "support.variable.property.dom.etl"
                        }
                    }
                },
                {
                    "name": "support.class.node.etl",
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
                },
                {
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(process)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.variable.object.process.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "4": {
                            "name": "support.variable.property.process.etl"
                        },
                        "5": {
                            "name": "support.function.process.etl"
                        }
                    }
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.type.object.module.etl"
                        },
                        "2": {
                            "name": "support.type.object.module.etl"
                        },
                        "3": {
                            "name": "punctuation.accessor.etl"
                        },
                        "4": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "5": {
                            "name": "support.type.object.module.etl"
                        }
                    }
                },
                {
                    "name": "support.variable.object.node.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
                },
                {
                    "match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n ) |\n (all|catch|finally|race|reject|resolve|then\n )\n)(?=\\s*\\()",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.etl"
                        },
                        "2": {
                            "name": "punctuation.accessor.optional.etl"
                        },
                        "3": {
                            "name": "support.function.event-handler.etl"
                        },
                        "4": {
                            "name": "support.function.etl"
                        },
                        "5": {
                            "name": "support.function.dom.etl"
                        },
                        "6": {
                            "name": "support.function.promise.etl"
                        }
                    }
                }
            ]
        },
        "expression-operators": {
            "patterns": [
                {
                    "name": "keyword.control.flow.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.flow.etl"
                        }
                    },
                    "end": "\\*",
                    "endCaptures": {
                        "0": {
                            "name": "keyword.generator.asterisk.etl"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?",
                    "captures": {
                        "1": {
                            "name": "keyword.control.flow.etl"
                        },
                        "2": {
                            "name": "keyword.generator.asterisk.etl"
                        }
                    }
                },
                {
                    "name": "keyword.operator.expression.delete.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "keyword.operator.expression.in.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
                },
                {
                    "name": "keyword.operator.expression.of.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
                },
                {
                    "name": "keyword.operator.expression.instanceof.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "keyword.operator.new.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "keyword.operator.expression.void.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))",
                    "captures": {
                        "1": {
                            "name": "keyword.control.as.etl"
                        },
                        "2": {
                            "name": "storage.modifier.etl"
                        }
                    }
                },
                {
                    "name": "keyword.operator.spread.etl",
                    "match": "\\.\\.\\."
                },
                {
                    "name": "keyword.operator.assignment.compound.etl",
                    "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
                },
                {
                    "name": "keyword.operator.assignment.compound.bitwise.etl",
                    "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
                },
                {
                    "name": "keyword.operator.bitwise.shift.etl",
                    "match": "<<|>>>|>>"
                },
                {
                    "name": "keyword.operator.comparison.etl",
                    "match": "===|!==|==|!="
                },
                {
                    "name": "keyword.operator.relational.etl",
                    "match": "<=|>=|<>|<|>"
                },
                {
                    "match": "(\\!)\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.logical.etl"
                        },
                        "2": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    }
                },
                {
                    "name": "keyword.operator.logical.etl",
                    "match": "\\!|&&|\\|\\||\\?\\?"
                },
                {
                    "name": "keyword.operator.bitwise.etl",
                    "match": "\\&|~|\\^|\\|"
                },
                {
                    "name": "keyword.operator.assignment.etl",
                    "match": "\\="
                },
                {
                    "name": "keyword.operator.decrement.etl",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.etl",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.arithmetic.etl",
                    "match": "%|\\*|/|-|\\+"
                },
                {
                    "begin": "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(/)(?![/*]))",
                    "end": "(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "match": "(?<=[_$[:alnum:])\\]])\\s*(/)(?![/*])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.arithmetic.etl"
                        }
                    }
                }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.etl"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.etl"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "function-call": {
            "begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
            "end": "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
            "patterns": [
                {
                    "name": "meta.function-call.etl",
                    "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
                    "end": "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\()",
                    "patterns": [
                        {
                            "include": "#support-function-call-identifiers"
                        },
                        {
                            "name": "entity.name.function.etl",
                            "match": "(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
                        }
                    ]
                },
                {
                    "include": "#comment"
                },
                {
                    "name": "meta.function-call.etl punctuation.accessor.optional.etl",
                    "match": "\\?\\."
                },
                {
                    "name": "meta.function-call.etl keyword.operator.definiteassignment.etl",
                    "match": "\\!"
                },
                {
                    "include": "#paren-expression"
                }
            ]
        },
        "support-function-call-identifiers": {
            "patterns": [
                {
                    "include": "#literal"
                },
                {
                    "include": "#support-objects"
                },
                {
                    "include": "#object-identifiers"
                },
                {
                    "include": "#punctuation-accessor"
                },
                {
                    "name": "keyword.operator.expression.import.etl",
                    "match": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))"
                }
            ]
        },
        "array-literal": {
            "name": "meta.array.literal.etl",
            "begin": "\\s*(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "meta.brace.square.etl"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.square.etl"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-comma"
                }
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.etl",
                    "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "name": "constant.numeric.binary.etl",
                    "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "name": "constant.numeric.octal.etl",
                    "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.etl"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "2": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "4": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "6": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "7": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "8": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "9": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "10": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "11": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "12": {
                            "name": "meta.delimiter.decimal.period.etl"
                        },
                        "13": {
                            "name": "storage.type.numeric.bigint.etl"
                        },
                        "14": {
                            "name": "storage.type.numeric.bigint.etl"
                        }
                    }
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "constant.language.boolean.false.etl",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                }
            ]
        },
        "null-literal": {
            "name": "constant.language.null.etl",
            "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        "this-literal": {
            "name": "variable.language.this.etl",
            "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)"
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.etl",
                    "begin": "/\\*\\*(?!/)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#docblock"
                        }
                    ]
                },
                {
                    "name": "comment.block.etl",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.etl"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.etl"
                        },
                        "2": {
                            "name": "comment.line.double-slash.etl"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.etl"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.etl"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.etl"
                        }
                    },
                    "end": "(?=$)",
                    "contentName": "comment.line.double-slash.etl"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "include": "#qstring-single"
                },
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-double": {
            "name": "string.quoted.double.etl",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\")|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "qstring-single": {
            "name": "string.quoted.single.etl",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.etl"
                }
            },
            "end": "(\\')|((?:[^\\\\\\n])$)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.etl"
                },
                "2": {
                    "name": "invalid.illegal.newline.etl"
                }
            },
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-character-escape": {
            "name": "constant.character.escape.etl",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },
        "docblock": {
            "patterns": [
                {
                    "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "constant.language.access-type.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        },
                        "4": {
                            "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                        },
                        "5": {
                            "name": "constant.other.email.link.underline.jsdoc"
                        },
                        "6": {
                            "name": "punctuation.definition.bracket.angle.end.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        },
                        "4": {
                            "name": "keyword.operator.control.jsdoc"
                        },
                        "5": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "name": "meta.example.jsdoc",
                    "begin": "((@)example)\\s+",
                    "end": "(?=@|\\*/)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "patterns": [
                        {
                            "match": "^\\s\\*\\s+"
                        },
                        {
                            "contentName": "constant.other.description.jsdoc",
                            "begin": "\\G(<)caption(>)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.jsdoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.jsdoc"
                                }
                            },
                            "end": "(</)caption(>)|(?=\\*/)",
                            "endCaptures": {
                                "0": {
                                    "name": "entity.name.tag.inline.jsdoc"
                                },
                                "1": {
                                    "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                                },
                                "2": {
                                    "name": "punctuation.definition.bracket.angle.end.jsdoc"
                                }
                            }
                        },
                        {
                            "match": "[^\\s@*](?:[^*]|\\*[^/])*",
                            "captures": {
                                "0": {
                                    "name": "source.embedded.etl"
                                }
                            }
                        }
                    ]
                },
                {
                    "match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "constant.language.symbol-type.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.link.underline.jsdoc"
                        },
                        "4": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "begin": "((@)typedef)\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "entity.name.type.instance.jsdoc",
                            "match": "(?:[^@\\s*/]|\\*[^/])+"
                        }
                    ]
                },
                {
                    "begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        },
                        {
                            "name": "variable.other.jsdoc",
                            "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
                        },
                        {
                            "name": "variable.other.jsdoc",
                            "match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
                                },
                                "2": {
                                    "name": "keyword.operator.assignment.jsdoc"
                                },
                                "3": {
                                    "name": "source.embedded.etl"
                                },
                                "4": {
                                    "name": "punctuation.definition.optional-value.end.bracket.square.jsdoc"
                                },
                                "5": {
                                    "name": "invalid.illegal.syntax.jsdoc"
                                }
                            }
                        }
                    ]
                },
                {
                    "begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    },
                    "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
                    "patterns": [
                        {
                            "include": "#jsdoctype"
                        }
                    ]
                },
                {
                    "match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "entity.name.type.instance.jsdoc"
                        }
                    }
                },
                {
                    "contentName": "variable.other.jsdoc",
                    "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        },
                        "4": {
                            "name": "punctuation.definition.string.begin.jsdoc"
                        }
                    },
                    "end": "(\\3)|(?=$|\\*/)",
                    "endCaptures": {
                        "0": {
                            "name": "variable.other.jsdoc"
                        },
                        "1": {
                            "name": "punctuation.definition.string.end.jsdoc"
                        }
                    }
                },
                {
                    "match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        },
                        "3": {
                            "name": "variable.other.jsdoc"
                        }
                    }
                },
                {
                    "name": "storage.type.class.jsdoc",
                    "match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    }
                },
                {
                    "include": "#inline-tags"
                },
                {
                    "match": "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.class.jsdoc"
                        },
                        "2": {
                            "name": "punctuation.definition.block.tag.jsdoc"
                        }
                    }
                }
            ]
        }
    }
}