# [PackageDev] target_format: plist, ext: tmLanguage
# npx js-yaml syntaxes/etl.tmLanguage.yaml > syntaxes/etl.tmLanguage.json
---
name: ETL
scopeName: source.etl
fileTypes: [etl]
uuid: a5720f64-ac4a-40f9-baf9-8b4c39b25d81

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  propertyAccessPreIdentifier: \??\.\s*
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  constantIdentifier: '[[:upper:]][_$[:digit:][:upper:]]*'
  propertyIdentifier: '\#?{{identifier}}'
  constantPropertyIdentifier: '\#?{{constantIdentifier}}'
  quotedStrings: (\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)
  nonIdentifierPropertyName: '{{quotedStrings}}|(\[([^\[\]]|\[[^\[\]]*\])+\])'
  label: ({{identifier}})\s*(:)
  hexNumber: \b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)
  binaryNumber: \b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)
  octalNumber: \b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)
  decimalNumber: |-
    (?<!\$)(?:
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
      (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
      (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
      (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
      (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
      (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
      (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
    )(?!\$)
  anyNumber: ({{hexNumber}})|({{binaryNumber}})|({{octalNumber}})|({{decimalNumber}})
  # any use of property name needs to ignore line breaks in regular expression because of decimal number regex (maintained for readability)
  propertyName: ({{anyNumber}}|({{identifier}})|{{nonIdentifierPropertyName}})
  propertyNameWithPrivate: ({{anyNumber}}|({{propertyIdentifier}})|{{nonIdentifierPropertyName}})
  constantVar: ({{constantIdentifier}})(?![_$[:alnum:]])
  constructsAndModifiers: '(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b'
  endOfStatement: ';|(?:^\s*{{constructsAndModifiers}})'
  varExprStart: '{{startOfDeclaration}}\b(var|let){{endOfIdentifier}}'
  constExprStart: '{{startOfDeclaration}}\b(const(?!\s+enum\b)){{endOfIdentifier}}'
  nonPropertyLookBehind: '[^\._$[:alnum:]]'
  lookBehindReturn: '^return|{{nonPropertyLookBehind}}return'
  lookBehindThrow: '^throw|{{nonPropertyLookBehind}}throw'
  lookBehindYield: '^yield|{{nonPropertyLookBehind}}yield'
  lookBehindAwait: '^await|{{nonPropertyLookBehind}}await'
  lookBehindDefault: '^default|{{nonPropertyLookBehind}}default'
  lookBehindConst: '^const|{{nonPropertyLookBehind}}const'
  lookBehindLet: '^let|{{nonPropertyLookBehind}}let'
  lookBehindVar: '^var|{{nonPropertyLookBehind}}var'
  lookBehindIn: '^in|{{nonPropertyLookBehind}}in'
  lookBehindOf: '^of|{{nonPropertyLookBehind}}of'
  lookBehindTypeof: '^typeof|{{nonPropertyLookBehind}}typeof'
  lookBehindCase: '^case|{{nonPropertyLookBehind}}case'
  lookBehindImport: '^import|{{nonPropertyLookBehind}}import'
  matchingParenthesis: (\(([^\(\)]|(\([^\(\)]*\)))*\))
  matchingBraces: (\{([^\{\}]|(\{[^\{\}]*\}))*\})
  matchingBrackets: (\[([^\[\]]|(\[[^\[\]]*\]))*\])
  inlineComment: \/\*([^\*]|(\*[^\/]))*\*\/
  startOfDeclaration: '{{startOfIdentifier}}(\s+)?'
  lookBehindOfPossiblyMultilineArrowWithDestructuring: (?<=[(=,])
  lookBehindOfPossiblyMultilineArrow: (?<=[(=,]|=>|{{lookBehindReturn}})
  lookBehindOfObjectMemberPossiblyMultilineArrow: (?<=:)
  # Identifier start | matching braces | matching parenthesis | matching square brackets
  typeParamersStart: ([_$[:alpha:]]|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}})
  typeParameters: (<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<])*\>)*\>)*>\s*)
  # Identifier start | matching braces | matching parenthesis | matching square brackets | matching strings
  typeArgumentsStart: (((keyof|infer|typeof|readonly)\s+)|(({{identifier}}|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}}|(\'[^\']*\')|(\"[^\"]*\")|(\`[^\`]*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))
  typeArgumentsInnerExpressionPart: '[^<>\(]|{{matchingParenthesis}}|(?<==)\>'
  typeArguments: '<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}(({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}})*(?<!=)\>))*(?<!=)\>)*(?<!=)>'
  functionCallLookup: \s*(?:(\?\.\s*)|(\!))?({{typeArguments}}\s*)?\(
  possiblyType: \s*([^<>\(\)\{\}]|\<([^<>]|\<[^<>]+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+
  typeparamertStartOfArrow: ''
  arrowLookup: |-
    # sure shot arrow functions even if => is on new line
    (
      {{typeParameters}}?
      [(]\s*({{inlineComment}}\s*)*
      (
        ([)]\s*:) |                                                                                       # ():
        ((\.\.\.\s*)?{{identifier}}\s*:)                                                                  # [(]param: | [(]...param:
      )
    ) |
    {{typeparamertStartOfArrow}}
    # arrow function possible to detect only with => on same line
    (
      {{typeParameters}}?                                                                                 # typeparameters
      \(\s*({{inlineComment}}\s*)*(([_$[:alpha:]]|{{matchingBraces}}|{{matchingBrackets}}|(\.\.\.\s*[_$[:alpha:]]))([^()]|{{matchingParenthesis}})*)?\)   # parameters
      (\s*:{{possiblyType}})?                                                                        # return type
      \s*=>                                                                                               # arrow operator
    )
  possiblyMultilineArrowExpressionBeforeEndOfLine: ((({{typeParameters}})?\()|(<))
  possiblyMultilineObjectBindingPattern: '{{matchingBraces}}\s*((:\s*\{?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrayBindingPattern: '{{matchingBrackets}}\s*((:\s*\[?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrowWParamters: '((([\{\[]\s*)?$)|({{possiblyMultilineObjectBindingPattern}})|({{possiblyMultilineArrayBindingPattern}}))'
  possiblyMultilineArrowWithoutTypeParameters: '[\(]\s*{{possiblyMultilineArrowWParamters}}'
  possiblyMultilineArrow: ((<\s*$)|({{typeParameters}}?{{possiblyMultilineArrowWithoutTypeParameters}}))  # during lookup treat <typeparameters>?( followed by line end as arrow or < followed by new line
  functionOrArrowLookup: |-
    \s*(
      ((async\s+)?(
        (function\s*[(<*]) |
        (function\s+) |
        ({{identifier}}\s*=>)
      )) |
      ((async\s*)?(
        {{possiblyMultilineArrow}} |
        {{arrowLookup}}
      ))
    )
  functionLikeType: |-
    (:\s*(
      (<) |
      ([(]\s*(
        ([)]) |
        (\.\.\.) |
        ([_$[:alnum:]]+\s*(
          ([:,?=])|
          ([)]\s*=>)
        ))
      ))
    )) |
    (:\s*{{startOfIdentifier}}Function{{endOfIdentifier}}) |
    (:\s*{{possiblyMultilineArrow}})
  functionLikeAssignmentOrType: |-
    \s*
    # function assignment |
    (={{functionOrArrowLookup}}) |
    # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
    {{functionLikeType}} |
    (:\s*(=>|{{matchingParenthesis}}|(<[^<>]*>)|[^<>(),=])+={{functionOrArrowLookup}})
  arrowFunctionEnd: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
  regexpTail: ([gimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$])
  completeRegexp: \/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/{{regexpTail}})

patterns:
# - include: '#directives'
- include: '#statements'

repository:
 
  script-block:
    patterns:
    - include: '#comment'
    - include: '#var-declaration' 

  var-declaration:
    name: meta.var.etl
    begin: '\b(let)\s+({{identifier}})\s*(=)'
    beginCaptures:
      '1': { name: storage.type.etl }
      '2': { name: 'variable.define.etl' }
      '3': { name: keyword.operator.assignment.etl }
    end: ;
    endCaptures:
      '0': { name: punctuation.terminator.statement.etl }
    patterns:
    - include: '#string'
    - include: '#numeric-literal'
    - include: '#boolean-literal'
    - include: '#array-literal' 
    - include: '#object-literal'

  statements:
    patterns:
    - include: '#comment'
    - include: '#using-file'
    - include: '#top-declaration'

  # using file
  using-file:
    name: meta.import.etl
    begin: '{{startOfDeclaration}}\b(using)(?:\s+)'
    beginCaptures:
      '2': { name: keyword.control.using.etl }
    end: '\s+(as)\s+({{identifier}})'
    endCaptures:
      '1': { name: keyword.control.as.etl }
      '2': { name: entity.name.type.package.etl }
    patterns:
    - include: '#string'

  # top element declaration
  top-declaration:
    patterns:
    - include: '#protocol-declaration'
    # - include: '#run-declaration'

  # protocol
  protocol-declaration:
    name: meta.module.etl
    begin: '\b(protocol)\b(?=\s+|/[/*])'
    beginCaptures:
      '1': { name: storage.type.module.etl }
    end: (?<=\})
    patterns:
    - include: '#protocol-declaration-patterns'

  protocol-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: 'entity.name.type.module.etl' }
    - include: '#protocol-body'

  protocol-body:
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.etl }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.etl }
    patterns:
    - include: '#comment'
    - include: '#protocol-segment-declaration'
    - include: '#protocol-segments-declaration'
    - include: '#protocol-case-declaration'

  protocol-segment-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b(segment)\b(?=\s+|/[/*])'
      beginCaptures:
        '1': { name: storage.type.class.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-segment-declaration-patterns'

  protocol-segment-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: entity.name.type.class.etl }
    - include: '#object-literal'

  protocol-segments-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b(segments)\b(?=\s+|/[/*])'
      beginCaptures:
        '1': { name: storage.type.class.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-segments-declaration-patterns'

  protocol-segments-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: entity.name.type.class.etl }
    - include: '#protocol-body'

  protocol-case-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b((oneof)|(when))\b(?=\s+|\()'
      beginCaptures:
        '1': { name: keyword.control.conditional.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-case-declaration-patterns'

  protocol-case-declaration-patterns:
    patterns:
    - include: '#comment'
    - include: '#paren-expression'
    - include: '#protocol-body'

  object-literal:
    name: meta.objectliteral.etl
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.etl }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.etl }
    patterns:
    - include: '#object-member'

  object-member:
    patterns:
    - name: meta.object.member.etl meta.object-literal.key.etl
      match: ({{identifier}}(.{{identifier}})*[\s]*:)
    - name: meta.object.member.etl
      patterns:
      - include: '#expression'
    
  expression:
    patterns:
    - include: '#expressionWithoutIdentifiers'
    - include: '#identifiers'
    - include: '#expressionPunctuations'

  identifiers:
    patterns:
    - include: '#object-identifiers'
    # function and method assignment
    - match: |-
        (?x)(?:{{propertyAccess}}\s*)?({{identifier}})(?=\s*={{functionOrArrowLookup}})
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: entity.name.function.etl }
    # const properties
    - match: '{{propertyAccess}}\s*({{constantPropertyIdentifier}})(?![_$[:alnum:]])'
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.constant.property.etl }
    # properties
    - match: '{{propertyAccess}}\s*({{propertyIdentifier}})'
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.property.etl }
    # const
    - name: variable.other.constant.etl
      match: '{{constantVar}}'
    # vars
    - name: variable.other.readwrite.etl
      match: '{{identifier}}'
  
  object-identifiers:
    patterns:
    # class
    - name: support.class.etl
      match: ({{identifier}})(?=\s*{{propertyAccessPreIdentifier}}prototype\b(?!\$))
    # object properties
    - match: |-
        (?x){{propertyAccess}}\s*(?:
          ({{constantPropertyIdentifier}}) |
          ({{propertyIdentifier}})
        )(?=\s*{{propertyAccessPreIdentifier}}{{propertyIdentifier}})
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.constant.object.property.etl }
        '4': { name: variable.other.object.property.etl }
    # objects
    - match: |-
        (?x)(?:
          ({{constantIdentifier}}) |
          ({{identifier}})
        )(?=\s*{{propertyAccessPreIdentifier}}{{propertyIdentifier}})
      captures:
        '1': { name: variable.other.constant.object.etl }
        '2': { name: variable.other.object.etl }

  expressionWithoutIdentifiers:
    patterns:
    - include: '#string'
    - include: '#comment'
    - include: '#function-expression'
    - include: '#object-literal'
    - include: '#expression-operators'
    - include: '#function-call'
    - include: '#literal'
    - include: '#support-objects'

  function-expression:
    name: meta.function.expression.etl
    begin: '{{startOfIdentifier}}(function\b)\s*'
    beginCaptures:
      '1': { name: storage.type.function.etl }
    end: (?<=\})
    patterns:
    - include: '#function-body'

  function-body:
    patterns:
    - include: '#comment'
    - include: '#function-parameters'
    - include: '#script-block'

  function-parameters:
    name: meta.parameters.etl
    begin: \(
    beginCaptures:
      '0': { name: punctuation.definition.parameters.begin.etl }
    end: \)
    endCaptures:
      '0': { name: punctuation.definition.parameters.end.etl }
    patterns:
    - include: '#function-parameters-body'

  # When updating this, also update the expression-inside-possibly-arrow-parens where this is inlined so that parameter-name can also be inlined
  function-parameters-body:
    patterns:
    - include: '#comment'
    - include: '#string'
    - include: '#parameter-name'
    - include: '#variable-initializer'
    - name: punctuation.separator.parameter.etl
      match: ','

  parameter-name:
    patterns:
    - match: '{{startOfIdentifier}}(public|protected|private|readonly)\s+(?=(public|protected|private|readonly)\s+)'
      captures:
        '1': { name: storage.modifier.etl }
    - match: |-
        (?x)(?:{{startOfIdentifier}}(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:){{startOfIdentifier}}(?:(this)|({{identifier}})){{endOfIdentifier}}\s*(\??)(?={{functionLikeAssignmentOrType}})
      captures:
        '1': { name: storage.modifier.etl }
        '2': { name: keyword.operator.rest.etl }
        '3': { name: entity.name.function.etl variable.language.this.etl }
        '4': { name: entity.name.function.etl }
        '5': { name: keyword.operator.optional.etl }
    - match: |-
        (?x)(?:{{startOfIdentifier}}(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?<!=|:){{startOfIdentifier}}(?:(this)|({{identifier}})){{endOfIdentifier}}\s*(\??)
      captures:
        '1': { name: storage.modifier.etl }
        '2': { name: keyword.operator.rest.etl }
        '3': { name: variable.parameter.etl variable.language.this.etl }
        '4': { name: variable.parameter.etl }
        '5': { name: keyword.operator.optional.etl }
    
  variable-initializer:
    patterns:
    # if it is assignment with expression on same line, use end of line as end of scope
    - begin: (?<!=|!)(=)(?!=)(?=\s*\S)(?!\s*.*=>\s*$)
      beginCaptures:
        '1': { name: keyword.operator.assignment.etl }
      end: (?=$|^|[,);}\]]|({{startOfIdentifier}}(of|in)\s+))
      patterns:
      - include: '#expression'
    # if the expression doesnt start on same line do not use end of line as end of unless the complete line is blank
    - begin: (?<!=|!)(=)(?!=)
      beginCaptures:
        '1': { name: keyword.operator.assignment.etl }
      end: (?=[,);}\]]|({{startOfIdentifier}}(of|in)\s+))|(?=^\s*$)|(?<=\S)(?<!=)(?=\s*$)
      patterns:
        - include: '#expression'

  expressionPunctuations:
    patterns:
    - include: '#punctuation-comma'
    - include: '#punctuation-accessor'

  #punctuations
  punctuation-comma:
    name: punctuation.separator.comma.etl
    match: ','

  punctuation-semicolon:
    name: punctuation.terminator.statement.etl
    match: ';'

  punctuation-accessor:
    match: '{{propertyAccess}}'
    captures:
      '1': { name: punctuation.accessor.etl }
      '2': { name: punctuation.accessor.optional.etl }

  #literals
  literal:
    patterns:
    - include: '#numeric-literal'
    - include: '#boolean-literal'
    - include: '#null-literal'
    - include: '#array-literal'
    - include: '#this-literal'

  #support variables
  support-objects:
    patterns:
    - name: variable.language.arguments.etl
      match: '{{startOfIdentifier}}(arguments)\b(?!\$)'
    # builtins
    - name: support.class.builtin.etl
      match: |-
        (?x){{startOfIdentifier}}(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array
          |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy
          |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray
          |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\b(?!\$)
    - name: support.class.error.etl
      match: '{{startOfIdentifier}}((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\b(?!\$)'
    - name: support.class.promise.etl
      match: '{{startOfIdentifier}}(Promise)\b(?!\$)'
    # known builtin function calls
    - name: support.function.etl
      match: |-
        (?x){{startOfIdentifier}}(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|
          isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\s*\()
    # Math
    - match: |-
        (?x){{startOfIdentifier}}(Math)(?:\s*{{propertyAccess}}\s*(?:
          (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|
          expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|
          round|sign|sin|sinh|sqrt|tan|tanh|trunc)
          |
          (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\b(?!\$)
      captures:
        '1': { name: support.constant.math.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.function.math.etl }
        '5': { name: support.constant.property.math.etl }
    # console
    - match: |-
        (?x){{startOfIdentifier}}(console)(?:\s*{{propertyAccess}}\s*(
          assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log
          |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\b(?!\$)
      captures:
        '1': { name: support.class.console.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.function.console.etl }
    # JSON
    - match: '{{startOfIdentifier}}(JSON)(?:\s*{{propertyAccess}}\s*(parse|stringify))?\b(?!\$)'
      captures:
        '1': { name: support.constant.json.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.function.json.etl }
    # import meta
    - match: '{{startOfIdentifier}}(import)\s*{{propertyAccess}}\s*(meta)\b(?!\$)'
      captures:
        '1': { name: keyword.control.import.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.variable.property.importmeta.etl }
    # new target
    - match: '{{startOfIdentifier}}(new)\s*{{propertyAccess}}\s*(target)\b(?!\$)'
      captures:
        '1': { name: keyword.operator.new.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.variable.property.target.etl }
    # DOM
    - match: |-
        (?x) {{propertyAccess}} \s* (?:
          (?:(constructor|length|prototype|__proto__)\b(?!\$|\s*{{typeParameters}}?\())
          |
          (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\b(?!\$)))
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: support.variable.property.etl }
        '4': { name: support.constant.etl }
    - match: |-
        (?x) {{startOfIdentifier}} \b (?:
          (document|event|navigator|performance|screen|window)
          |
          (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener
          |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule
          |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration
          |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern
          |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent
          |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException
          |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer
          |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry
          |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent
          |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential
          |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync
          |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement
          |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement
          |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement
          |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement
          |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement
          |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement
          |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement
          |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement
          |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement
          |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement
          |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement
          |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase
          |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction
          |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities
          |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess
          |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent
          |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream
          |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent
          |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID
          |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification
          |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential
          |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark
          |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList
          |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent
          |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList
          |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager
          |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource
          |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement
          |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength
          |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio
          |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement
          |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement
          |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement
          |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength
          |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement
          |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio
          |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList
          |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement
          |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement
          |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState
          |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet
          |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable
          |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer
          |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat
          |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES
          |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope
          |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult
          |XSLTProcessor))\b(?!\$)
      captures:
        '1': { name: support.variable.dom.etl }
        '2': { name: support.class.dom.etl }
    - match: |-
        (?x) {{propertyAccess}} \s* (?:
          (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE
          |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR
          |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR
          |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)
          |
          (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName
          |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop
          |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor
          |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption
          |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear
          |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete
          |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset
          |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight
          |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds
          |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize
          |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host
          |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth
          |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext
          |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom
          |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple
          |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName
          |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight
          |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer
          |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling
          |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText
          |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts
          |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove
          |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary
          |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead
          |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile
          |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\b(?!\$|\s*{{typeParameters}}?\()
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: support.constant.dom.etl }
        '4': { name: support.variable.property.dom.etl }
    # Node
    - name: support.class.node.etl
      match: |-
        (?x){{startOfIdentifier}}(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream
          |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b(?!\$)
    - match: |-
        (?x){{startOfIdentifier}}(process)(?:{{propertyAccess}}(?:
          (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)
          |
          (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)
        ))?\b(?!\$)
      captures:
        '1': { name: support.variable.object.process.etl }
        '2': { name: punctuation.accessor.etl }
        '3': { name: punctuation.accessor.optional.etl }
        '4': { name: support.variable.property.process.etl }
        '5': { name: support.function.process.etl }
    - match: '{{startOfIdentifier}}(?:(exports)|(module)(?:{{propertyAccess}}(exports|id|filename|loaded|parent|children))?)\b(?!\$)'
      captures:
        '1': { name: support.type.object.module.etl }
        '2': { name: support.type.object.module.etl }
        '3': { name: punctuation.accessor.etl }
        '4': { name: punctuation.accessor.optional.etl }
        '5': { name: support.type.object.module.etl }
    - name: support.variable.object.node.etl
      match: '{{startOfIdentifier}}(global|GLOBAL|root|__dirname|__filename)\b(?!\$)'
    # method calls
    - match: |-
       (?x) {{propertyAccess}} \s*
       (?:
        (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
          Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
          Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|
          Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
          Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
          Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
          Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
          Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)
        ) |
        (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
          scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
          sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|
          Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
          Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
          savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
          contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
          createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
          test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
          untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
          print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
          fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
          forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
          abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
          releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
          Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
          Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
          moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back
        ) |
        (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
          appendChild|appendData|before|blur|canPlayType|captureStream|
          caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
          cloneContents|cloneNode|cloneRange|close|closest|collapse|
          compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
          convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
          createAttributeNS|createCaption|createCDATASection|createComment|
          createContextualFragment|createDocument|createDocumentFragment|
          createDocumentType|createElement|createElementNS|createEntityReference|
          createEvent|createExpression|createHTMLDocument|createNodeIterator|
          createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
          createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
          deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
          deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
          enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
          exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
          getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
          getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
          getClientRects|getContext|getDestinationInsertionPoints|getElementById|
          getElementsByClassName|getElementsByName|getElementsByTagName|
          getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
          getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
          hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
          insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
          insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
          isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
          lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
          moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
          parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
          previousSibling|probablySupportsContext|queryCommandEnabled|
          queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
          querySelector|querySelectorAll|registerContentHandler|registerElement|
          registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
          removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
          removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
          requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
          scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
          setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
          setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
          setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
          slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
          submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
          toDataURL|toggle|toString|values|write|writeln
        ) |
        (all|catch|finally|race|reject|resolve|then
        )
       )(?=\s*\()
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: support.function.event-handler.etl }
        '4': { name: support.function.etl }
        '5': { name: support.function.dom.etl }
        '6': { name: support.function.promise.etl }
  
  #expression operators
  expression-operators:
    patterns:
    - name: keyword.control.flow.etl
      match: '{{startOfIdentifier}}(await){{endOfIdentifier}}'
    - begin: '{{startOfIdentifier}}(yield){{endOfIdentifier}}(?=\s*{{inlineComment}}\s*\*)'
      beginCaptures:
        '1': { name: keyword.control.flow.etl }
      end: \*
      endCaptures:
        '0': { name: keyword.generator.asterisk.etl }
      patterns:
      - include: '#comment'
    - match: '{{startOfIdentifier}}(yield){{endOfIdentifier}}(?:\s*(\*))?'
      captures:
        '1': { name: keyword.control.flow.etl }
        '2': { name: keyword.generator.asterisk.etl }
    - name: keyword.operator.expression.delete.etl
      match: '{{startOfIdentifier}}delete{{endOfIdentifier}}'
    - name: keyword.operator.expression.in.etl
      match: '{{startOfIdentifier}}in{{endOfIdentifier}}(?!\()'
    - name: keyword.operator.expression.of.etl
      match: '{{startOfIdentifier}}of{{endOfIdentifier}}(?!\()'
    - name: keyword.operator.expression.instanceof.etl
      match: '{{startOfIdentifier}}instanceof{{endOfIdentifier}}'
    - name: keyword.operator.new.etl
      match: '{{startOfIdentifier}}new{{endOfIdentifier}}'
    # - include: '#typeof-operator'
    - name: keyword.operator.expression.void.etl
      match: '{{startOfIdentifier}}void{{endOfIdentifier}}'
      #handle as operator specifically to be recognized only if it is 'as' followed by space
    - match: '{{startOfIdentifier}}(as)\s+(const)(?=\s*($|[;,:})\]]))'
      captures:
        '1': { name: keyword.control.as.etl }
        '2': { name: storage.modifier.etl }
    - name: keyword.operator.spread.etl
      match: \.\.\.
    - name: keyword.operator.assignment.compound.etl
      match: \*=|(?<!\()/=|%=|\+=|\-=
    - name: keyword.operator.assignment.compound.bitwise.etl
      match: \&=|\^=|<<=|>>=|>>>=|\|=
    - name: keyword.operator.bitwise.shift.etl
      match: <<|>>>|>>
    - name: keyword.operator.comparison.etl
      match: ===|!==|==|!=
    - name: keyword.operator.relational.etl
      match: <=|>=|<>|<|>
    - match: (\!)\s*(/)(?![/*])
      captures:
        '1': { name: keyword.operator.logical.etl }
        '2': { name: keyword.operator.arithmetic.etl }
    - name: keyword.operator.logical.etl
      match: \!|&&|\|\||\?\?
    - name: keyword.operator.bitwise.etl
      match: \&|~|\^|\|
    - name: keyword.operator.assignment.etl
      match: \=
    - name: keyword.operator.decrement.etl
      match: --
    - name: keyword.operator.increment.etl
      match: \+\+
    - name: keyword.operator.arithmetic.etl
      match: '%|\*|/|-|\+'
    # capture the arithmetic sign followed by variable or parenthesized expression so that it is not interpreted as regex
    - begin: (?<=[_$[:alnum:])\]])\s*(?=({{inlineComment}}\s*)+(/)(?![/*]))
      end: (/)(?!\*([^\*]|(\*[^\/]))*\*\/)
      endCaptures:
        '1': { name: keyword.operator.arithmetic.etl }
      patterns:
      - include: '#comment'
    - match: (?<=[_$[:alnum:])\]])\s*(/)(?![/*])
      captures:
        '1': { name: keyword.operator.arithmetic.etl }

  paren-expression:
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.round.etl }
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.etl }
    patterns:
    - include: '#expression'

  #function call and new expression
  function-call:
    begin: (?=(((({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))|(?<=[\)])){{functionCallLookup}})
    end: (?<=\))(?!(((({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))|(?<=[\)])){{functionCallLookup}})
    patterns:
    - name: meta.function-call.etl
      begin: (?=(({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))
      end: (?={{functionCallLookup}})
      patterns:
      - include: '#support-function-call-identifiers'
      - name: entity.name.function.etl
        match: ({{propertyIdentifier}})
    - include: '#comment'
    - name: meta.function-call.etl punctuation.accessor.optional.etl
      match: \?\.
    - name: meta.function-call.etl keyword.operator.definiteassignment.etl
      match: \!
    - include: '#paren-expression'

  support-function-call-identifiers:
    patterns:
    - include: '#literal'
    - include: '#support-objects'
    - include: '#object-identifiers'
    - include: '#punctuation-accessor'
    - name: keyword.operator.expression.import.etl
      match: (?:{{startOfIdentifier}}import(?=\s*[\(]\s*[\"\'\`]))

  array-literal:
    name: meta.array.literal.etl
    begin: \s*(\[)
    beginCaptures:
      '1': { name: meta.brace.square.etl }
    end: \]
    endCaptures:
      '0': { name: meta.brace.square.etl }
    patterns:
    - include: '#expression'
    - include: '#punctuation-comma'

  # With respect to seperators, we allow mroe than is syntacically valid below
  # (multiple consecutive and trailing ones are errors), to be more graceful
  # when the code contains errors
  numeric-literal:
    patterns:
    - name: constant.numeric.hex.etl
      match: '{{hexNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - name: constant.numeric.binary.etl
      match: '{{binaryNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - name: constant.numeric.octal.etl
      match: '{{octalNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - match: |-
        (?x)
        {{decimalNumber}}
      captures:
        '0': {name: constant.numeric.decimal.etl}
        '1': {name: meta.delimiter.decimal.period.etl}
        '2': { name: storage.type.numeric.bigint.etl }
        '3': {name: meta.delimiter.decimal.period.etl}
        '4': { name: storage.type.numeric.bigint.etl }
        '5': {name: meta.delimiter.decimal.period.etl}
        '6': { name: storage.type.numeric.bigint.etl }
        '7': { name: storage.type.numeric.bigint.etl }
        '8': {name: meta.delimiter.decimal.period.etl}
        '9': { name: storage.type.numeric.bigint.etl }
        '10': {name: meta.delimiter.decimal.period.etl}
        '11': { name: storage.type.numeric.bigint.etl }
        '12': {name: meta.delimiter.decimal.period.etl}
        '13': { name: storage.type.numeric.bigint.etl }
        '14': { name: storage.type.numeric.bigint.etl }
  
  boolean-literal:
    patterns:
    - name: constant.language.boolean.true.etl
      match: '{{startOfIdentifier}}true{{endOfIdentifier}}'
    - name: constant.language.boolean.false.etl
      match: '{{startOfIdentifier}}false{{endOfIdentifier}}'

  null-literal:
    name: constant.language.null.etl
    match: '{{startOfIdentifier}}null{{endOfIdentifier}}'

  this-literal:
    name: variable.language.this.etl
    match: '{{startOfIdentifier}}this\b(?!\$)'

  comment:
    patterns:
    - name: comment.block.documentation.etl
      begin: /\*\*(?!/)
      beginCaptures:
        '0': { name: punctuation.definition.comment.etl }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.etl }
      patterns:
      - include: '#docblock'
    - name: comment.block.etl
      begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
      beginCaptures:
        '1': { name: punctuation.definition.comment.etl }
        '2': { name: storage.type.internaldeclaration.etl }
        '3': { name: punctuation.decorator.internaldeclaration.etl }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.etl }
    - begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.etl }
        '2': { name: comment.line.double-slash.etl }
        '3': { name: punctuation.definition.comment.etl }
        '4': { name: storage.type.internaldeclaration.etl }
        '5': { name: punctuation.decorator.internaldeclaration.etl }
      end: (?=$)
      contentName: comment.line.double-slash.etl

  string:
    patterns:
    - include: '#qstring-single'
    - include: '#qstring-double'

  qstring-double:
    name: string.quoted.double.etl
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.etl }
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      '1': { name: punctuation.definition.string.end.etl }
      '2': { name: invalid.illegal.newline.etl }
    patterns:
    - include: '#string-character-escape'

  qstring-single:
    name: string.quoted.single.etl
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.etl }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.etl }
      '2': { name: invalid.illegal.newline.etl }
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.etl
    match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  #jsdoc syntax taken from https://github.com/atom/language-javascript/
  docblock:
    patterns:
    # @access private|protected|public
    - match: |-
        (?x)
        ((@)(?:access|api))
        \s+
        (private|protected|public)
        \b
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: constant.language.access-type.jsdoc }
    # @author name [<email>]
    - match: |-
        (?x)
        ((@)author)
        \s+
        (
          [^@\s<>*/]
          (?:[^@<>*/]|\*[^/])*
        )
        (?:
          \s*
          (<)
          ([^>\s]+)
          (>)
        )?
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: entity.name.type.instance.jsdoc }
        '4': { name: punctuation.definition.bracket.angle.begin.jsdoc }
        '5': { name: constant.other.email.link.underline.jsdoc }
        '6': { name: punctuation.definition.bracket.angle.end.jsdoc }
    # @borrows <that namepath> as <this namepath>
    - match: |-
        (?x)
        ((@)borrows) \s+
        ((?:[^@\s*/]|\*[^/])+)    # <that namepath>
        \s+ (as) \s+              # as
        ((?:[^@\s*/]|\*[^/])+)    # <this namepath>
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: entity.name.type.instance.jsdoc }
        '4': { name: keyword.operator.control.jsdoc }
        '5': { name: entity.name.type.instance.jsdoc }
    # @example text();
    - name: meta.example.jsdoc
      begin: ((@)example)\s+
      end: (?=@|\*/)
      beginCaptures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
      patterns:
      # Match to prevent leading asterisk being highlighted as JS
      - match: ^\s\*\s+
      # Leading <caption>…</caption> before example
      - contentName: constant.other.description.jsdoc
        begin: \G(<)caption(>)
        beginCaptures:
          '0': { name: entity.name.tag.inline.jsdoc }
          '1': { name: punctuation.definition.bracket.angle.begin.jsdoc }
          '2': { name: punctuation.definition.bracket.angle.end.jsdoc }
        end: (</)caption(>)|(?=\*/)
        endCaptures:
          '0': { name: entity.name.tag.inline.jsdoc }
          '1': { name: punctuation.definition.bracket.angle.begin.jsdoc }
          '2': { name: punctuation.definition.bracket.angle.end.jsdoc }
      # Highlighted JavaScript example
      - match: '[^\s@*](?:[^*]|\*[^/])*'
        captures:
          '0':
            name: source.embedded.etl
            # Commenting out the embedded pattern matching since sublime doesnt support this
            # patterns:
            # - include: source.etl
    # @kind type
    - match: >-
        (?x)
        ((@)kind)
        \s+
        (class|constant|event|external|file|function|member|mixin|module|namespace|typedef)
        \b
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: constant.language.symbol-type.jsdoc }
    # @see namepathOrURL
    - match: |-
        (?x)
        ((@)see)
        \s+
        (?:
          # URL
          (
            (?=https?://)
            (?:[^\s*]|\*[^/])+
          )
          |
          # JSDoc namepath
          (
            (?!
              # Avoid matching bare URIs (also acceptable as links)
              https?://
              |
              # Avoid matching {@inline tags}; we match those below
              (?:\[[^\[\]]*\])? # Possible description [preceding]{@tag}
              {@(?:link|linkcode|linkplain|tutorial)\b
            )
            # Matched namepath
            (?:[^@\s*/]|\*[^/])+
          )
        )
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: variable.other.link.underline.jsdoc }
        '4': { name: entity.name.type.instance.jsdoc }
    # @template Foo,Bar
    - match: |-
        (?x)
        ((@)template)
        \s+
        # One or more valid identifiers
        (
          [A-Za-z_$]         # First character: non-numeric word character
          [\w$.\[\]]*        # Rest of identifier
          (?:                # Possible list of additional identifiers
            \s* , \s*
            [A-Za-z_$]
            [\w$.\[\]]*
          )*
        )
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3':
          name: variable.other.jsdoc
          # Commenting out the embedded pattern matching since sublime doesnt support this
          # patterns:
          # - name: punctuation.delimiter.object.comma.jsdoc
          #   match: ','
    # Tags followed by an identifier token
    # -  @<tag> identifier
    - match: |-
        (?x)
        (
          (@)
          (?:arg|argument|const|constant|member|namespace|param|var)
        )
        \s+
        (
          [A-Za-z_$]
          [\w$.\[\]]*
        )
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: variable.other.jsdoc }
    # Tags followed by a type expression, then a namepath
    # -  @<tag> {type} namepath
    - begin: ((@)typedef)\s+(?={)
      beginCaptures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - include: '#jsdoctype'
      - name: entity.name.type.instance.jsdoc
        match: (?:[^@\s*/]|\*[^/])+
    # Tags followed by a type expression, then an identifier
    # -  @<tag> {type} identifier
    - begin: >-
        ((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\s+(?={)
      beginCaptures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - include: '#jsdoctype'
      - name: variable.other.jsdoc
        match: ([A-Za-z_$][\w$.\[\]]*)
      # Optional value
      - name: variable.other.jsdoc
        match: |-
          (?x)
          (\[)\s*
          [\w$]+
          (?:
            (?:\[\])?                                        # Foo[ ].bar properties within an array
            \.                                                # Foo.Bar namespaced parameter
            [\w$]+
          )*
          (?:
            \s*
            (=)                                                # [foo=bar] Default parameter value
            \s*
            (
              # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
              (?>
                "(?:(?:\*(?!/))|(?:\\(?!"))|[^*\\])*?" |                      # [foo="bar"] Double-quoted
                '(?:(?:\*(?!/))|(?:\\(?!'))|[^*\\])*?' |                      # [foo='bar'] Single-quoted
                \[ (?:(?:\*(?!/))|[^*])*? \] |                                # [foo=[1,2]] Array literal
                (?:(?:\*(?!/))|\s(?!\s*\])|\[.*?(?:\]|(?=\*/))|[^*\s\[\]])*   # Everything else
              )*
            )
          )?
          \s*(?:(\])((?:[^*\s]|\*[^\s/])+)?|(?=\*/))
        captures:
          '1': { name: punctuation.definition.optional-value.begin.bracket.square.jsdoc }
          '2': { name: keyword.operator.assignment.jsdoc }
          '3':
            name: source.embedded.etl
            # Commenting out the embedded pattern matching since sublime doesnt support this
            # patterns:
            #   - include: '#inline-tags'
            #   - include: source.js
          '4': { name: punctuation.definition.optional-value.end.bracket.square.jsdoc }
          '5': { name: invalid.illegal.syntax.jsdoc }
    # Tags followed by a type expression
    # -  @<tag> {type}
    - begin: |-
        (?x)
        (
          (@)
          (?:define|enum|exception|export|extends|lends|implements|modifies
          |namespace|private|protected|returns?|suppress|this|throws|type
          |yields?)
        )
        \s+(?={)
      beginCaptures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
      end: (?=\s|\*/|[^{}\[\]A-Za-z_$])
      patterns:
      - include: '#jsdoctype'
    # Tags followed by a namepath
    # -  @<tag> namepath
    - match: |-
        (?x)
        (
          (@)
          (?:alias|augments|callback|constructs|emits|event|fires|exports?
          |extends|external|function|func|host|lends|listens|interface|memberof!?
          |method|module|mixes|mixin|name|requires|see|this|typedef|uses)
        )
        \s+
        (
          (?:
            [^{}@\s*] | \*[^/]
          )+
        )
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: entity.name.type.instance.jsdoc }
    # Tags followed by a quoted arbitrary value
    # -  @<tag> "Quoted value"
    - contentName: variable.other.jsdoc
      begin: ((@)(?:default(?:value)?|license|version))\s+(([''"]))
      beginCaptures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: variable.other.jsdoc }
        '4': { name: punctuation.definition.string.begin.jsdoc }
      end: (\3)|(?=$|\*/)
      endCaptures:
        '0': { name: variable.other.jsdoc }
        '1': { name: punctuation.definition.string.end.jsdoc }
    # Tags followed by an arbitrary value
    # -  @<tag> value
    - match: ((@)(?:default(?:value)?|license|tutorial|variation|version))\s+([^\s*]+)
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }
        '3': { name: variable.other.jsdoc }
    # Tags without arguments, or a tag without expected arguments. Because JSDoc permits
    # tags to be spread across lines, we should at least highlight the opening tag for
    # stuff like this:
    #
    #    /**
    #      * @param
    #      * {type}
    #      * name
    - name: storage.type.class.jsdoc
      match: >-
        (?x) (@)
        (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles
        |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright
        |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception
        |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func
        |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc
        |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method
        |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects
        |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected
        |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary
        |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation
        |version|virtual|writeOnce|yields?)
        \b
      captures:
        '1': { name: punctuation.definition.block.tag.jsdoc }
    - include: '#inline-tags'
    # any tag
    - match: ((@)(?:{{identifier}}))(?=\s+)
      captures:
        '1': { name: storage.type.class.jsdoc }
        '2': { name: punctuation.definition.block.tag.jsdoc }



