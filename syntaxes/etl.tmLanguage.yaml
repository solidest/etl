# [PackageDev] target_format: plist, ext: tmLanguage
# npx js-yaml syntaxes/etl.tmLanguage.yaml > syntaxes/etl.tmLanguage.json
---
name: ETL
scopeName: source.etl
fileTypes: [etl]
uuid: a5720f64-ac4a-40f9-baf9-8b4c39b25d81

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  propertyAccessPreIdentifier: \??\.\s*
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  constantIdentifier: '[[:upper:]][_$[:digit:][:upper:]]*'
  propertyIdentifier: '\#?{{identifier}}'
  constantPropertyIdentifier: '\#?{{constantIdentifier}}'
  quotedStrings: (\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)
  nonIdentifierPropertyName: '{{quotedStrings}}|(\[([^\[\]]|\[[^\[\]]*\])+\])'
  label: ({{identifier}})\s*(:)
  hexNumber: \b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)
  binaryNumber: \b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)
  octalNumber: \b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)
  decimalNumber: |-
    (?<!\$)(?:
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
      (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
      (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
      (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
      (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
      (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
      (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
      (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
    )(?!\$)
  anyNumber: ({{hexNumber}})|({{binaryNumber}})|({{octalNumber}})|({{decimalNumber}})
  # any use of property name needs to ignore line breaks in regular expression because of decimal number regex (maintained for readability)
  propertyName: ({{anyNumber}}|({{identifier}})|{{nonIdentifierPropertyName}})
  propertyNameWithPrivate: ({{anyNumber}}|({{propertyIdentifier}})|{{nonIdentifierPropertyName}})
  constantVar: ({{constantIdentifier}})(?![_$[:alnum:]])
  constructsAndModifiers: '(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b'
  endOfStatement: ';|(?:^\s*{{constructsAndModifiers}})'
  varExprStart: '{{startOfDeclaration}}\b(var|let){{endOfIdentifier}}'
  constExprStart: '{{startOfDeclaration}}\b(const(?!\s+enum\b)){{endOfIdentifier}}'
  nonPropertyLookBehind: '[^\._$[:alnum:]]'
  lookBehindReturn: '^return|{{nonPropertyLookBehind}}return'
  lookBehindThrow: '^throw|{{nonPropertyLookBehind}}throw'
  lookBehindYield: '^yield|{{nonPropertyLookBehind}}yield'
  lookBehindAwait: '^await|{{nonPropertyLookBehind}}await'
  lookBehindDefault: '^default|{{nonPropertyLookBehind}}default'
  lookBehindConst: '^const|{{nonPropertyLookBehind}}const'
  lookBehindLet: '^let|{{nonPropertyLookBehind}}let'
  lookBehindVar: '^var|{{nonPropertyLookBehind}}var'
  lookBehindIn: '^in|{{nonPropertyLookBehind}}in'
  lookBehindOf: '^of|{{nonPropertyLookBehind}}of'
  lookBehindTypeof: '^typeof|{{nonPropertyLookBehind}}typeof'
  lookBehindCase: '^case|{{nonPropertyLookBehind}}case'
  lookBehindImport: '^import|{{nonPropertyLookBehind}}import'
  matchingParenthesis: (\(([^\(\)]|(\([^\(\)]*\)))*\))
  matchingBraces: (\{([^\{\}]|(\{[^\{\}]*\}))*\})
  matchingBrackets: (\[([^\[\]]|(\[[^\[\]]*\]))*\])
  inlineComment: \/\*([^\*]|(\*[^\/]))*\*\/
  startOfDeclaration: '{{startOfIdentifier}}(\s+)?'
  lookBehindOfPossiblyMultilineArrowWithDestructuring: (?<=[(=,])
  lookBehindOfPossiblyMultilineArrow: (?<=[(=,]|=>|{{lookBehindReturn}})
  lookBehindOfObjectMemberPossiblyMultilineArrow: (?<=:)
  # Identifier start | matching braces | matching parenthesis | matching square brackets
  typeParamersStart: ([_$[:alpha:]]|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}})
  typeParameters: (<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<]|\<\s*{{typeParamersStart}}([^=<>]|=[^<])*\>)*\>)*>\s*)
  # Identifier start | matching braces | matching parenthesis | matching square brackets | matching strings
  typeArgumentsStart: (((keyof|infer|typeof|readonly)\s+)|(({{identifier}}|{{matchingBraces}}|{{matchingParenthesis}}|{{matchingBrackets}}|(\'[^\']*\')|(\"[^\"]*\")|(\`[^\`]*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))
  typeArgumentsInnerExpressionPart: '[^<>\(]|{{matchingParenthesis}}|(?<==)\>'
  typeArguments: '<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}(({{typeArgumentsInnerExpressionPart}}|\<\s*{{typeArgumentsStart}}({{typeArgumentsInnerExpressionPart}})*(?<!=)\>))*(?<!=)\>)*(?<!=)>'
  functionCallLookup: \s*(?:(\?\.\s*)|(\!))?({{typeArguments}}\s*)?\(
  possiblyType: \s*([^<>\(\)\{\}]|\<([^<>]|\<[^<>]+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+
  typeparamertStartOfArrow: ''
  arrowLookup: |-
    # sure shot arrow functions even if => is on new line
    (
      {{typeParameters}}?
      [(]\s*({{inlineComment}}\s*)*
      (
        ([)]\s*:) |                                                                                       # ():
        ((\.\.\.\s*)?{{identifier}}\s*:)                                                                  # [(]param: | [(]...param:
      )
    ) |
    {{typeparamertStartOfArrow}}
    # arrow function possible to detect only with => on same line
    (
      {{typeParameters}}?                                                                                 # typeparameters
      \(\s*({{inlineComment}}\s*)*(([_$[:alpha:]]|{{matchingBraces}}|{{matchingBrackets}}|(\.\.\.\s*[_$[:alpha:]]))([^()]|{{matchingParenthesis}})*)?\)   # parameters
      (\s*:{{possiblyType}})?                                                                        # return type
      \s*=>                                                                                               # arrow operator
    )
  possiblyMultilineArrowExpressionBeforeEndOfLine: ((({{typeParameters}})?\()|(<))
  possiblyMultilineObjectBindingPattern: '{{matchingBraces}}\s*((:\s*\{?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrayBindingPattern: '{{matchingBrackets}}\s*((:\s*\[?$)|(({{possiblyType}}\s*)?=\s*))'
  possiblyMultilineArrowWParamters: '((([\{\[]\s*)?$)|({{possiblyMultilineObjectBindingPattern}})|({{possiblyMultilineArrayBindingPattern}}))'
  possiblyMultilineArrowWithoutTypeParameters: '[\(]\s*{{possiblyMultilineArrowWParamters}}'
  possiblyMultilineArrow: ((<\s*$)|({{typeParameters}}?{{possiblyMultilineArrowWithoutTypeParameters}}))  # during lookup treat <typeparameters>?( followed by line end as arrow or < followed by new line
  functionOrArrowLookup: |-
    \s*(
      ((async\s+)?(
        (function\s*[(<*]) |
        (function\s+) |
        ({{identifier}}\s*=>)
      )) |
      ((async\s*)?(
        {{possiblyMultilineArrow}} |
        {{arrowLookup}}
      ))
    )
  functionLikeType: |-
    (:\s*(
      (<) |
      ([(]\s*(
        ([)]) |
        (\.\.\.) |
        ([_$[:alnum:]]+\s*(
          ([:,?=])|
          ([)]\s*=>)
        ))
      ))
    )) |
    (:\s*{{startOfIdentifier}}Function{{endOfIdentifier}}) |
    (:\s*{{possiblyMultilineArrow}})
  functionLikeAssignmentOrType: |-
    \s*
    # function assignment |
    (={{functionOrArrowLookup}}) |
    # typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>
    {{functionLikeType}} |
    (:\s*(=>|{{matchingParenthesis}}|(<[^<>]*>)|[^<>(),=])+={{functionOrArrowLookup}})
  arrowFunctionEnd: (?==>|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))
  regexpTail: ([gimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$])
  completeRegexp: \/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)+\])+\/{{regexpTail}})

patterns:
  - include: '#comment'
  - include: '#using-file'
  - include: '#lua-block'
  - include: '#dpd-block'

repository:

  lua-block:
    contentName: "source.lua"
    begin: '<%lua'
    beginCaptures:
      '0': { name: storage.type.module.etl }
    end: '%>'
    endCaptures:
      '0': { name: storage.type.module.etl }
    patterns:
      - include: "source.lua"

  dpd-block:
    name: meta.block.etl
    begin: '<%'
    beginCaptures:
      '0': { name: storage.type.module.etl }
    end: '%>'
    endCaptures:
      '0': { name: storage.type.module.etl }
    patterns:
    - include: '#comment'
    - include: '#top-declaration' 

  using-file:
    name: meta.import.etl
    begin: '{{startOfDeclaration}}\b(using)(?:\s+)'
    beginCaptures:
      '2': { name: keyword.control.using.etl }
    end: (?=\n)
    patterns:
    - include: '#string'

  # top element declaration
  top-declaration:
    patterns:
    - include: '#protocol-declaration'

  # protocol
  protocol-declaration:
    name: meta.module.etl
    begin: '\b(protocol)\b(?=\s+|/[/*])'
    beginCaptures:
      '1': { name: storage.type.module.etl }
    end: (?<=\})
    patterns:
    - include: '#protocol-declaration-patterns'

  protocol-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: 'entity.name.type.module.etl' }
    - include: '#protocol-body'

  protocol-body:
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.etl }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.etl }
    patterns:
    - include: '#comment'
    - include: '#protocol-segment-declaration'
    - include: '#protocol-segments-declaration'
    - include: '#protocol-case-declaration'

  protocol-segment-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b(segment)\b(?=\s+|/[/*])'
      beginCaptures:
        '1': { name: storage.type.class.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-segment-declaration-patterns'

  protocol-segment-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: entity.name.type.class.etl }
    - include: '#object-literal'

  protocol-segments-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b(segments)\b(?=\s+|/[/*])'
      beginCaptures:
        '1': { name: storage.type.class.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-segments-declaration-patterns'

  protocol-segments-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: entity.name.type.class.etl }
    - include: '#protocol-body'

  protocol-case-declaration:
    patterns:
    - name: meta.segment.declaration.etl
      begin: '\b((oneof)|(when))\b(?=\s+|\()'
      beginCaptures:
        '1': { name: keyword.control.conditional.etl }
      end: (?<=\})
      patterns:
      - include: '#protocol-case-declaration-patterns'

  protocol-case-declaration-patterns:
    patterns:
    - include: '#comment'
    - include: '#paren-expression'
    - include: '#protocol-body'

  # element
  element-declaration-patterns:
    patterns:
    - include: '#comment'
    - match: '{{identifier}}'
      captures:
        '0': { name: entity.name.type.class.etl }
    - include: '#object-literal'

  object-literal:
    name: meta.objectliteral.etl
    begin: \{
    beginCaptures:
      '0': { name: punctuation.definition.block.etl }
    end: \}
    endCaptures:
      '0': { name: punctuation.definition.block.etl }
    patterns:
    - include: '#object-member'

  object-member:
    patterns:
    - match: ({{startOfIdentifier}}({{identifier}})((\.)({{identifier}}))*\s*:)
      captures:
        '1':
          patterns:
            - name: punctuation.accessor.optional.etl
              match: \.
            - name: meta.object.member.etl meta.object-literal.key.etl
              match: '{{identifier}}'
            - name: meta.object.member.etl meta.object-literal.key.etl
              match: ':'

    - name: meta.object.member.etl
      patterns:
      - include: '#expression'
    
  expression:
    patterns:
    - include: '#expressionWithoutIdentifiers'
    - include: '#identifiers'
    - include: '#expressionPunctuations'

  identifiers:
    patterns:
    - include: '#object-identifiers'
    # function and method assignment
    - match: |-
        (?x)(?:{{propertyAccess}}\s*)?({{identifier}})(?=\s*={{functionOrArrowLookup}})
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: entity.name.function.etl }
    # const properties
    - match: '{{propertyAccess}}\s*({{constantPropertyIdentifier}})(?![_$[:alnum:]])'
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.constant.property.etl }
    # properties
    - match: '{{propertyAccess}}\s*({{propertyIdentifier}})'
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.property.etl }
    # const
    - name: variable.other.constant.etl
      match: '{{constantVar}}'
    # vars
    - name: variable.other.readwrite.etl
      match: '{{identifier}}'
  
  object-identifiers:
    patterns:
    # class
    - name: support.class.etl
      match: ({{identifier}})(?=\s*{{propertyAccessPreIdentifier}}prototype\b(?!\$))
    # object properties
    - match: |-
        (?x){{propertyAccess}}\s*(?:
          ({{constantPropertyIdentifier}}) |
          ({{propertyIdentifier}})
        )(?=\s*{{propertyAccessPreIdentifier}}{{propertyIdentifier}})
      captures:
        '1': { name: punctuation.accessor.etl }
        '2': { name: punctuation.accessor.optional.etl }
        '3': { name: variable.other.constant.object.property.etl }
        '4': { name: variable.other.object.property.etl }
    # objects
    - match: |-
        (?x)(?:
          ({{constantIdentifier}}) |
          ({{identifier}})
        )(?=\s*{{propertyAccessPreIdentifier}}{{propertyIdentifier}})
      captures:
        '1': { name: variable.other.constant.object.etl }
        '2': { name: variable.other.object.etl }

  expressionWithoutIdentifiers:
    patterns:
    - include: '#string'
    - include: '#comment'
    - include: '#object-literal'
    - include: '#expression-operators'
    - include: '#function-call'
    - include: '#literal'
    - include: '#support-objects'

  expressionPunctuations:
    patterns:
    - include: '#punctuation-comma'
    - include: '#punctuation-accessor'

  #punctuations
  punctuation-comma:
    name: punctuation.separator.comma.etl
    match: ','

  punctuation-accessor:
    match: '{{propertyAccess}}'
    captures:
      '1': { name: punctuation.accessor.etl }
      '2': { name: punctuation.accessor.optional.etl }

  #literals
  literal:
    patterns:
    - include: '#numeric-literal'
    - include: '#boolean-literal'
    - include: '#null-literal'
    - include: '#array-literal'
    - include: '#this-literal'

  #support variables
  support-objects:
    patterns:
    # known builtin function calls
    - name: support.function.etl
      match: |-
        (?x){{startOfIdentifier}}(bytesize|checkcode|beginof|endof)(?=\s*\()
  
  #expression operators
  expression-operators:
    patterns:
    - name: keyword.operator.assignment.compound.etl
      match: \*=|(?<!\()/=|%=|\+=|\-=
    - name: keyword.operator.assignment.compound.bitwise.etl
      match: \&=|\^=|<<=|>>=|>>>=|\|=
    - name: keyword.operator.bitwise.shift.etl
      match: <<|>>>|>>
    - name: keyword.operator.comparison.etl
      match: ===|!==|==|!=
    - name: keyword.operator.relational.etl
      match: <=|>=|<>|<|>
    - match: (\!)\s*(/)(?![/*])
      captures:
        '1': { name: keyword.operator.logical.etl }
        '2': { name: keyword.operator.arithmetic.etl }
    - name: keyword.operator.logical.etl
      match: \#|\!|&&|\|\||\?\?
    - name: keyword.operator.bitwise.etl
      match: \&|~|\^|\|
    - name: keyword.operator.assignment.etl
      match: \=
    - name: keyword.operator.decrement.etl
      match: --
    - name: keyword.operator.increment.etl
      match: \+\+
    - name: keyword.operator.arithmetic.etl
      match: '%|\*|/|-|\+'
    # capture the arithmetic sign followed by variable or parenthesized expression so that it is not interpreted as regex
    - begin: (?<=[_$[:alnum:])\]])\s*(?=({{inlineComment}}\s*)+(/)(?![/*]))
      end: (/)(?!\*([^\*]|(\*[^\/]))*\*\/)
      endCaptures:
        '1': { name: keyword.operator.arithmetic.etl }
      patterns:
      - include: '#comment'
    - match: (?<=[_$[:alnum:])\]])\s*(/)(?![/*])
      captures:
        '1': { name: keyword.operator.arithmetic.etl }

  paren-expression:
    begin: \(
    beginCaptures:
      '0': {name: meta.brace.round.etl }
    end: \)
    endCaptures:
      '0': {name: meta.brace.round.etl }
    patterns:
    - include: '#expression'

  #function call and new expression
  function-call:
    begin: (?=(((({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))|(?<=[\)])){{functionCallLookup}})
    end: (?<=\))(?!(((({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))|(?<=[\)])){{functionCallLookup}})
    patterns:
    - name: meta.function-call.etl
      begin: (?=(({{identifier}})(\s*{{propertyAccessPreIdentifier}}({{propertyIdentifier}}))*)|({{propertyAccessPreIdentifier}}{{propertyIdentifier}}))
      end: (?={{functionCallLookup}})
      patterns:
      - include: '#support-function-call-identifiers'
      - name: entity.name.function.etl
        match: ({{propertyIdentifier}})
    - include: '#comment'
    - name: meta.function-call.etl punctuation.accessor.optional.etl
      match: \?\.
    - name: meta.function-call.etl keyword.operator.definiteassignment.etl
      match: \!
    - include: '#paren-expression'

  support-function-call-identifiers:
    patterns:
    - include: '#literal'
    - include: '#support-objects'
    - include: '#object-identifiers'
    - include: '#punctuation-accessor'
    - name: keyword.operator.expression.import.etl
      match: (?:{{startOfIdentifier}}import(?=\s*[\(]\s*[\"\'\`]))

  array-literal:
    name: meta.array.literal.etl
    begin: \s*(\[)
    beginCaptures:
      '1': { name: meta.brace.square.etl }
    end: \]
    endCaptures:
      '0': { name: meta.brace.square.etl }
    patterns:
    - include: '#expression'
    - include: '#punctuation-comma'

  # With respect to seperators, we allow mroe than is syntacically valid below
  # (multiple consecutive and trailing ones are errors), to be more graceful
  # when the code contains errors
  numeric-literal:
    patterns:
    - name: constant.numeric.hex.etl
      match: '{{hexNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - name: constant.numeric.binary.etl
      match: '{{binaryNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - name: constant.numeric.octal.etl
      match: '{{octalNumber}}'
      captures:
        '1': { name: storage.type.numeric.bigint.etl }
    - match: |-
        (?x)
        {{decimalNumber}}
      captures:
        '0': {name: constant.numeric.decimal.etl}
        '1': {name: meta.delimiter.decimal.period.etl}
        '2': { name: storage.type.numeric.bigint.etl }
        '3': {name: meta.delimiter.decimal.period.etl}
        '4': { name: storage.type.numeric.bigint.etl }
        '5': {name: meta.delimiter.decimal.period.etl}
        '6': { name: storage.type.numeric.bigint.etl }
        '7': { name: storage.type.numeric.bigint.etl }
        '8': {name: meta.delimiter.decimal.period.etl}
        '9': { name: storage.type.numeric.bigint.etl }
        '10': {name: meta.delimiter.decimal.period.etl}
        '11': { name: storage.type.numeric.bigint.etl }
        '12': {name: meta.delimiter.decimal.period.etl}
        '13': { name: storage.type.numeric.bigint.etl }
        '14': { name: storage.type.numeric.bigint.etl }
  
  boolean-literal:
    patterns:
    - name: constant.language.boolean.true.etl
      match: '{{startOfIdentifier}}true{{endOfIdentifier}}'
    - name: constant.language.boolean.false.etl
      match: '{{startOfIdentifier}}false{{endOfIdentifier}}'

  null-literal:
    name: constant.language.null.etl
    match: '{{startOfIdentifier}}null{{endOfIdentifier}}'

  this-literal:
    name: variable.language.this.etl
    match: '{{startOfIdentifier}}this\b(?!\$)'

  comment:
    patterns:
    - name: comment.block.etl
      begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
      beginCaptures:
        '1': { name: punctuation.definition.comment.etl }
        '2': { name: storage.type.internaldeclaration.etl }
        '3': { name: punctuation.decorator.internaldeclaration.etl }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.etl }
    - begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.etl }
        '2': { name: comment.line.double-slash.etl }
        '3': { name: punctuation.definition.comment.etl }
        '4': { name: storage.type.internaldeclaration.etl }
        '5': { name: punctuation.decorator.internaldeclaration.etl }
      end: (?=$)
      contentName: comment.line.double-slash.etl

  string:
    patterns:
    - include: '#qstring-double'
    - include: '#qstring-single'
    - include: '#qstring-hex'

  qstring-double:
    name: string.quoted.double.etl
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.etl }
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      '1': { name: punctuation.definition.string.end.etl }
      '2': { name: invalid.illegal.newline.etl }
    patterns:
    - include: '#string-character-escape'

  qstring-single:
    name: string.quoted.single.etl
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.etl }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.etl }
      '2': { name: invalid.illegal.newline.etl }
    patterns:
    - include: '#string-character-escape'

  qstring-hex:
    name: string.quoted.hex.etl
    begin: "%"
    beginCaptures:
      '0': { name: punctuation.definition.string.tbegin.etl }
    end: "%"
    endCaptures:
      '0': { name: punctuation.definition.string.tend.etl }
    patterns:
    - name: constant.numeric.hex.etl
      match: '[0-9A-Fa-f\t\s]*'
      
  string-character-escape:
    name: constant.character.escape.etl
    match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)
